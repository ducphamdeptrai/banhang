@model banhang.Models.PurchaseOrder

<div class="page-wrapper">
	<div class="page-breadcrumb" style="padding-top:100px">
		<div class="row align-items-center">
			<div class="col-md-6 col-8 align-self-center">
				<h2>Thêm đơn nhập hàng</h2>

				<form id="purchaseOrderForm" asp-action="AddPO" method="post">
					@Html.AntiForgeryToken()
					<div class="form-group">
						<label>Nhà Cung Cấp</label>
						<select asp-for="SupplierId" class="form-control" asp-items="@(ViewData["Suppliers"] as SelectList)">
							<option value="">-- Chọn nhà cung cấp --</option>
						</select>
						<span asp-validation-for="SupplierId" class="text-danger"></span>
					</div>

					<div class="form-group">
						<label>Chọn sản phẩm</label>
						<select id="productDropdown" class="form-control">
							<option value="">-- Chọn sản phẩm --</option>
							@if (ViewData["Products"] is SelectList productList)
							{
								@foreach (var product in productList)
								{
									<option value="@product.Value">@product.Text</option>
								}
							}
						</select>
					</div>

					<div class="form-group">
						<label>Sản phẩm đã chọn</label>
						<table class="table">
							<thead>
								<tr>
									<th>Sản phẩm</th>           
									<th>Số lượng</th>
									<th>Hành động</th>
								</tr>
							</thead>
							<tbody id="selectedProducts"></tbody>
						</table>
					</div>

					<input type="hidden" id="productIds" name="ProductIds" value="">
					<input type="hidden" id="quantities" name="Quantities" value="">

					<button type="submit" class="btn btn-success">Lưu</button>
				</form>

				<!-- Hiển thị lỗi -->
				@if (!ViewData.ModelState.IsValid)
				{
					<div class="alert alert-danger">
						@foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
						{
							<p>@error.ErrorMessage</p>
						}
					</div>
				}
			</div>
		</div>
	</div>
</div>

<script>
	document.getElementById('productDropdown').addEventListener('change', function() {
		let selectedValue = this.value;
		let selectedText = this.options[this.selectedIndex].text;

		if (selectedValue) {
			let tbody = document.getElementById('selectedProducts');

			// Kiểm tra sản phẩm đã chọn chưa
			if (document.querySelector(`#selectedProducts tr[data-id="${selectedValue}"]`)) {
				alert("Sản phẩm đã được chọn.");
				this.value = "";
				return;
			}

			// Thêm sản phẩm vào danh sách
			let row = `<tr data-id="${selectedValue}">
				<td>${selectedText}</td>
				<td><input type="number" class="form-control qty" min="1" value="1"></td>
				<td><button type="button" class="btn btn-danger btn-sm remove">Xóa</button></td>
			</tr>`;
			tbody.insertAdjacentHTML('beforeend', row);
			this.value = ""; 
		}
	});

	// Xóa sản phẩm khỏi danh sách
	document.addEventListener('click', function(event) {
		if (event.target.classList.contains('remove')) {
			event.target.closest('tr').remove();
		}
	});

	// Khi submit form, lưu danh sách sản phẩm vào input ẩn
	document.getElementById('purchaseOrderForm').addEventListener('submit', function(event) {
		let ids = [];
		let quantities = [];

		document.querySelectorAll('#selectedProducts tr').forEach(row => {
			let id = row.getAttribute('data-id');
			let qty = row.querySelector('.qty').value;
			ids.push(id);
			quantities.push(qty);
		});

		document.getElementById('productIds').value = ids.join(',');
		document.getElementById('quantities').value = quantities.join(',');

		// Kiểm tra nếu không có sản phẩm nào được chọn
		if (ids.length === 0) {
			alert("Vui lòng chọn ít nhất một sản phẩm.");
			event.preventDefault(); // Ngăn form submit
		}

		console.log("ProductIds:", document.getElementById('productIds').value);
		console.log("Quantities:", document.getElementById('quantities').value);
	});
</script>
