@model Order
@{
    ViewData["Title"] = "POS - Bán Hàng";
    Layout = null;
}
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<!-- Thêm Bootstrap -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<style>
#suggestions {
    position: absolute;
    top: 40%; /* Đưa danh sách xuống ngay dưới input */
    left: 0;
    width: 100%;
    max-height: 300px;
    overflow-y: auto;
    z-index: 1050;
    background: white;
    border: 1px solid #ddd;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    display: none;
}


#suggestions .list-group-item {
    cursor: pointer;
}

#suggestions .list-group-item:hover {
    background-color: #f8f9fa;
}

</style>
<div class="container-fluid mt-3">
    <div class="row">
        <!-- Khu vực danh sách sản phẩm -->
        <div class="col-md-8">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white d-flex justify-content-between position-relative">
                    <input type="text" id="productSearch" class="form-control" placeholder="Thêm sản phẩm vào đơn...">
                </div>
                <ul id="suggestions" class="list-group position-absolute"></ul> <!-- Đưa ra ngoài để không bị đè -->

                <div class="card-body text-center">
                    <table id="productTable" class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Sản phẩm</th>
                                <th>Giá</th>
                                <th>Số lượng</th>
                                <th>Tổng</th>
                                <th>Thao tác</th>
                            </tr>
                        </thead>
                        <tbody id="cartBody"></tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Khu vực thanh toán và thông tin khách hàng -->
        <div class="col-md-4">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white d-flex justify-content-between">
                    <input type="text" id="customerSearch" class="form-control" placeholder="Thêm khách hàng vào đơn...">
                    <ul id="customerSuggestions" class="list-group mt-1" style="position: absolute; width: 100%; z-index: 1000; display: none;"></ul>
                </div>
                <input type="hidden" name="CustomerId" id="customerId" value="0"> <!-- Mặc định "Khách lẻ" -->
                <div class="card-body">
                    <p><strong>Tổng tiền:</strong> <span id="totalAmount" class="float-end">0 VND</span></p>
@*                     <p class="text-danger"><strong>KHÁCH PHẢI TRẢ:</strong> <span id="totalAmount" class="float-end">0 VND</span></p>
 *@                    <label>Tiền khách đưa:</label>
                    <input type="number" id="cashInput" class="form-control">
                    <p class="mt-2"><strong>Tiền thừa trả khách:</strong> <span id="changeAmount" class="float-end text-success">0 VND</span></p>
                    <hr>
                    <input type="text" id="orderNote" name="Status" class="form-control" placeholder="Nhập ghi chú đơn hàng...">
                </div>
            </div>

            <div class="mt-3 d-flex justify-content-between">
                
                <button class="btn btn-primary" id="confirmPayment">THANH TOÁN (F1)</button>
            </div>
        </div>
    </div>
</div>
<script>
    let customers = @Html.Raw(Json.Serialize(ViewBag.Customers ?? new List<object>()));

console.log("Danh sách khách hàng từ ViewBag:", customers);

$("#customerSearch").on("input", function () {
    let searchTerm = $(this).val().toLowerCase();
    let suggestions = $("#customerSuggestions");

    suggestions.empty().hide();
    if (searchTerm.length === 0) return;

    let filteredCustomers = customers.filter(c => c.customerName.toLowerCase().includes(searchTerm));

    if (filteredCustomers.length > 0) {
        filteredCustomers.forEach(c => {
            let item = $(`<li class="list-group-item">${c.customerName}</li>`);
            item.data("id", c.customerId);
            item.data("name", c.customerName);

            item.on("click", function () {
                $("#customerId").val($(this).data("id"));
                $("#customerSearch").val($(this).data("name"));
                suggestions.empty().hide();
            });

            suggestions.append(item);
        });

        suggestions.show();
    }
});

// Ẩn gợi ý khi click ra ngoài
$(document).on("click", function (e) {
    if (!$(e.target).closest("#customerSearch, #customerSuggestions").length) {
        $("#customerSuggestions").empty().hide();
    }
});

// Khi submit, nếu không chọn khách thì mặc định "Khách lẻ"
$("form").on("submit", function () {
    if ($("#customerSearch").val().trim() === "") {
        $("#customerId").val("0"); // "Khách lẻ" có ID = 0
    }
});

    let cart = [];
    let products = @Html.Raw(Json.Serialize(ViewBag.Products ?? new List<object>()));

    console.log("Danh sách sản phẩm từ ViewBag:", products);

    $("#productSearch").on("input", function () {
        let searchTerm = $(this).val().toLowerCase();
        let suggestions = $("#suggestions");

        suggestions.empty().hide();
        if (searchTerm.length === 0) return;

        let filteredProducts = products
            .filter(p => p && p.productName) 
            .filter(p => p.productName.toLowerCase().includes(searchTerm));

        console.log("Sản phẩm khớp từ khóa:", filteredProducts);

        if (filteredProducts.length > 0) {
            filteredProducts.forEach(p => {
                let price = p.price ?? 0;

let item = $(`
    <li class="list-group-item d-flex justify-content-between">
        <span>${p.productName}</span>
        <span class="d-flex">
            <span class="me-3">${price.toLocaleString('vi-VN')} VND</span>
            <span>Số lượng còn: ${p.stock}</span>
        </span>
    </li>
`);
                item.data("id", p.productId);
                item.data("name", p.productName);
                item.data("price", price);

                item.on("click", function () {
                    addToCart($(this).data("id"), $(this).data("name"), $(this).data("price"));
                    $("#productSearch").val("");
                    suggestions.empty().hide();
                });

                suggestions.append(item);
            });

            suggestions.show();
        }
    });

    $(document).on("click", function (e) {
        if (!$(e.target).closest("#productSearch, #suggestions").length) {
            $("#suggestions").empty().hide();
        }
    });

    function addToCart(productId, productName, productPrice) {
        let existingItem = cart.find(item => item.id === productId);
        if (existingItem) {
            existingItem.quantity++;
        } else {
            cart.push({ id: productId, name: productName, price: productPrice, quantity: 1 });
        }
        updateCart();
    }

function updateCart() {
    let cartBody = $("#cartBody");
    cartBody.empty();
    let total = 0;
    let productIds = [];
    let quantities = [];

    cart.forEach(item => {
        total += item.price * item.quantity;
        productIds.push(item.id);
        quantities.push(item.quantity);

        cartBody.append(`
            <tr data-id="${item.id}">

                <td>${item.name}</td>
                <td>${item.price.toLocaleString('vi-VN')} VND</td>
                <td>
                    <button class="btn btn-sm btn-secondary change-qty" data-id="${item.id}" data-change="-1">-</button>
                    <input type="number" class="form-control quantity-input" data-id="${item.id}" value="${item.quantity}" min="1" style="width: 60px; display: inline-block;">
                    <button class="btn btn-sm btn-primary change-qty" data-id="${item.id}" data-change="1">+</button>
                </td>
                <td>${(item.price * item.quantity).toLocaleString('vi-VN')} VND</td>
                <td><button class="btn btn-sm btn-danger remove-item" data-id="${item.id}">X</button></td>
            </tr>
        `);
    });

    $("#totalAmount").text(total.toLocaleString('vi-VN'));
    $("#productIds").val(JSON.stringify(productIds));
    $("#quantities").val(JSON.stringify(quantities));

    updateHiddenInputs();
    updateChangeAmount();
}

    $("#cashInput").on("input", function () {
        updateChangeAmount();
    });
$(document).on("click", ".change-qty", function () {
    let productId = $(this).data("id");
    let change = parseInt($(this).data("change"));

    let cartItem = cart.find(item => item.id === productId);
    if (!cartItem) return;

    cartItem.quantity += change;
    if (cartItem.quantity < 1) cartItem.quantity = 1;

    updateCart();
});
$(document).on("input", ".quantity-input", function () {
    let productId = $(this).data("id");
    let newQuantity = parseInt($(this).val());

    let cartItem = cart.find(item => item.id === productId);
    if (!cartItem) return;

    if (isNaN(newQuantity) || newQuantity < 1) {
        newQuantity = 1;
    }

    cartItem.quantity = newQuantity;
    updateCart();
});


    function updateChangeAmount() {
        let totalAmount = parseInt($("#totalAmount").text().replace(/\D/g, "")) || 0;
        let cashReceived = parseInt($("#cashInput").val()) || 0;

        if (isNaN(cashReceived) || cashReceived < 0) {
            $("#cashInput").val(0);
            cashReceived = 0;
        }

        let changeAmount = cashReceived - totalAmount;
        $("#changeAmount").text(changeAmount >= 0 ? changeAmount.toLocaleString('vi-VN') + " VND" : "Chưa đủ tiền");
    }
function updateHiddenInputs() {
    let hiddenInputs = $("#hiddenInputs");
    hiddenInputs.empty(); // Xóa các input cũ

    cart.forEach(item => {
        hiddenInputs.append(`<input type="hidden" name="ProductIds" value="${item.id}">`);
        hiddenInputs.append(`<input type="hidden" name="Quantities" value="${item.quantity}">`);
    });
}
$(document).ready(function () {
    $("#confirmPayment").click(function () {
        let cartItems = [];

        $("#cartBody tr").each(function () {
            let productId = $(this).data("id"); // Dùng `data-id` để lấy ID sản phẩm
            let quantity = parseInt($(this).find(".quantity-input").val()); // Sửa lại class input

            if (productId && quantity > 0) { // Kiểm tra sản phẩm hợp lệ
                cartItems.push({
                    ProductId: parseInt(productId),
                    Quantity: quantity
                });
            }
        });

        console.log("Danh sách sản phẩm:", cartItems); // Kiểm tra log

        if (cartItems.length === 0) {
            alert("Vui lòng chọn ít nhất một sản phẩm.");
            return; // Dừng nếu giỏ hàng rỗng
        }

        let orderData = {
            CustomerId: parseInt($("#customerId").val()) || 0, 
            DiscountAmount: parseFloat($("#discountAmount").text().replace(" VND", "").replace(",", "")) || 0,
            IsDelivery: $("#deliveryCheck").prop("checked"),
            OrderNote: $("#orderNote").val(),
            OrderDetails: cartItems
        };

        console.log("Dữ liệu gửi đi:", JSON.stringify(orderData, null, 2)); // Kiểm tra JSON gửi đi

        $.ajax({
            url: "/POS/ProcessOrder",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(orderData),
            success: function (response) {
                alert(response.message);

                // Lấy orderId từ phản hồi (giả sử response chứa orderId)
                let orderId = response.orderId;

                if (!orderId) {
                    alert("Không tìm thấy mã đơn hàng!");
                    return;
                }

                // Mở trang in hóa đơn
                window.open("/POS/PrintInvoice?orderId=" + orderId, "_blank");

                location.reload();
            },
            error: function (xhr) {
                console.error("Lỗi AJAX:", xhr);
                alert("Có lỗi xảy ra: " + (xhr.responseJSON?.message || "Không xác định"));
            }
        });
    });
});

</script>


